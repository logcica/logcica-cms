/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Images".
 */
export type Images =
  | {
      url?: string | null;
      id?: string | null;
    }[]
  | null;
/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    sectors: Sector;
    partnerships: Partnership;
    organisations: Organisation;
    activities: Activity;
    workspaces: Workspace;
    counters: Counter;
    places: Place;
    persons: Person;
    contributions: Contribution;
    relationships: Relationship;
    profiles: Profile;
    contacts: Contact;
    actions: Action;
    orders: Order;
    subscriptions: Subscription;
    fulfilments: Fulfilment;
    products: Product;
    product_groups: ProductGroup;
    recipes: Recipe;
    batches: Batch;
    sessions: Session;
    catalogs: Catalog;
    catalog_items: CatalogItem;
    availabilities: Availability;
    week_availabilities: WeekAvailability;
    season_availabilities: SeasonAvailability;
    categories: Category;
    classifications: Classification;
    codes: Code;
    code_lists: CodeList;
    units: Unit;
    media: Media;
    knowledge_bases: KnowledgeBase;
    knowledge_element: KnowledgeElement;
    information_systems: InformationSystem;
    references: Reference;
    users: User;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    sectors: SectorsSelect<false> | SectorsSelect<true>;
    partnerships: PartnershipsSelect<false> | PartnershipsSelect<true>;
    organisations: OrganisationsSelect<false> | OrganisationsSelect<true>;
    activities: ActivitiesSelect<false> | ActivitiesSelect<true>;
    workspaces: WorkspacesSelect<false> | WorkspacesSelect<true>;
    counters: CountersSelect<false> | CountersSelect<true>;
    places: PlacesSelect<false> | PlacesSelect<true>;
    persons: PersonsSelect<false> | PersonsSelect<true>;
    contributions: ContributionsSelect<false> | ContributionsSelect<true>;
    relationships: RelationshipsSelect<false> | RelationshipsSelect<true>;
    profiles: ProfilesSelect<false> | ProfilesSelect<true>;
    contacts: ContactsSelect<false> | ContactsSelect<true>;
    actions: ActionsSelect<false> | ActionsSelect<true>;
    orders: OrdersSelect<false> | OrdersSelect<true>;
    subscriptions: SubscriptionsSelect<false> | SubscriptionsSelect<true>;
    fulfilments: FulfilmentsSelect<false> | FulfilmentsSelect<true>;
    products: ProductsSelect<false> | ProductsSelect<true>;
    product_groups: ProductGroupsSelect<false> | ProductGroupsSelect<true>;
    recipes: RecipesSelect<false> | RecipesSelect<true>;
    batches: BatchesSelect<false> | BatchesSelect<true>;
    sessions: SessionsSelect<false> | SessionsSelect<true>;
    catalogs: CatalogsSelect<false> | CatalogsSelect<true>;
    catalog_items: CatalogItemsSelect<false> | CatalogItemsSelect<true>;
    availabilities: AvailabilitiesSelect<false> | AvailabilitiesSelect<true>;
    week_availabilities: WeekAvailabilitiesSelect<false> | WeekAvailabilitiesSelect<true>;
    season_availabilities: SeasonAvailabilitiesSelect<false> | SeasonAvailabilitiesSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    classifications: ClassificationsSelect<false> | ClassificationsSelect<true>;
    codes: CodesSelect<false> | CodesSelect<true>;
    code_lists: CodeListsSelect<false> | CodeListsSelect<true>;
    units: UnitsSelect<false> | UnitsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    knowledge_bases: KnowledgeBasesSelect<false> | KnowledgeBasesSelect<true>;
    knowledge_element: KnowledgeElementSelect<false> | KnowledgeElementSelect<true>;
    information_systems: InformationSystemsSelect<false> | InformationSystemsSelect<true>;
    references: ReferencesSelect<false> | ReferencesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sectors".
 */
export interface Sector {
  id: string;
  name?: string | null;
  within?: (string | Sector)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "partnerships".
 */
export interface Partnership {
  id: string;
  name?: string | null;
  shortName?: string | null;
  place?: (string | null) | Place;
  area?: (string | null) | Place;
  contacts?: (string | Contact)[] | null;
  profiles?: (string | Profile)[] | null;
  sectors?: (string | Sector)[] | null;
  categories?: (string | Category)[] | null;
  mainImage?: (string | null) | Media;
  images?: (string | Media)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "places".
 */
export interface Place {
  id: string;
  key?: string | null;
  name?: string | null;
  type?: ('address' | 'locality' | 'municipality' | 'region' | 'country') | null;
  /**
   * @minItems 2
   * @maxItems 2
   */
  center?: [number, number] | null;
  within?: (string | Place)[] | null;
  title?: string | null;
  address?: Address;
  description?: string | null;
  categories?: (string | Category)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Address".
 */
export interface Address {
  street?: string | null;
  postalCode?: string | null;
  locality?: string | null;
  municipality?: string | null;
  country?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  key?: string | null;
  name?: string | null;
  subject?: string | null;
  classification?: (string | null) | Classification;
  color?: string | null;
  icon?: {
    fa?: string | null;
  };
  title?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "classifications".
 */
export interface Classification {
  id: string;
  key?: string | null;
  name?: string | null;
  subject?: string | null;
  system?: (string | null) | InformationSystem;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "information_systems".
 */
export interface InformationSystem {
  id: string;
  key?: string | null;
  name?: string | null;
  type?: string | null;
  link?: string | null;
  area?: (string | null) | Place;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contacts".
 */
export interface Contact {
  id: string;
  type?: ('person' | 'organisation') | null;
  givenName?: string | null;
  familyName?: string | null;
  name?: string | null;
  title?: string | null;
  mainEmail?: string | null;
  holder?: Party;
  area?: (string | null) | Place;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Party".
 */
export interface Party {
  organisation?: (string | null) | Organisation;
  partnership?: (string | null) | Partnership;
  person?: (string | null) | Person;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "organisations".
 */
export interface Organisation {
  id: string;
  number?: string | null;
  name?: string | null;
  legalFormShort?: string | null;
  legalForm?: (string | null) | Code;
  registeredAt?: string | null;
  mainActivity?: (string | null) | Activity;
  owner?: Party;
  place?: (string | null) | Place;
  workspaces?: (string | Workspace)[] | null;
  mainImage?: Image;
  images?: Images;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "codes".
 */
export interface Code {
  id: string;
  name?: string | null;
  code?: string | null;
  key?: string | null;
  rank?: number | null;
  skip?: boolean | null;
  list?: (string | null) | CodeList;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "code_lists".
 */
export interface CodeList {
  id: string;
  key?: string | null;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activities".
 */
export interface Activity {
  id: string;
  isMain?: boolean | null;
  sectors?: (string | Sector)[] | null;
  name?: string | null;
  internalName?: string | null;
  mainWorkspace?: (string | null) | Workspace;
  place?: (string | null) | Place;
  manager?: Party;
  profiles?: (string | Profile)[] | null;
  contacts?: (string | Contact)[] | null;
  categories?: (string | Category)[] | null;
  productionCategories?: (string | Category)[] | null;
  otherCategories?: (string | Category)[] | null;
  description?: Description;
  mainImage?: (string | null) | Media;
  images?: (string | Media)[] | null;
  mainVideo?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "workspaces".
 */
export interface Workspace {
  id: string;
  number?: string | null;
  name?: string | null;
  internalName?: string | null;
  categories?: (string | Category)[] | null;
  manager?: Party;
  owner?: Party;
  place?: (string | null) | Place;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "profiles".
 */
export interface Profile {
  id: string;
  key?: string | null;
  localKey?: string | null;
  title?: string | null;
  name?: string | null;
  type?: string | null;
  link?: string | null;
  informationSystem?: (string | null) | InformationSystem;
  subject?: Party;
  area?: (string | null) | Place;
  description?: Description;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Description".
 */
export interface Description {
  short?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  long?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  source?: (string | null) | KnowledgeElement;
  author?: Party;
  license?: (string | null) | Code;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "knowledge_element".
 */
export interface KnowledgeElement {
  id: string;
  name?: string | null;
  type?: string | null;
  link?: string | null;
  base?: (string | null) | KnowledgeBase;
  area?: (string | null) | Place;
  categories?: (string | Category)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "knowledge_bases".
 */
export interface KnowledgeBase {
  id: string;
  name?: string | null;
  type?: string | null;
  link?: string | null;
  area?: (string | null) | Place;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Image".
 */
export interface Image {
  url?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "persons".
 */
export interface Person {
  id: string;
  givenName?: string | null;
  familyName?: string | null;
  name?: string | null;
  place?: (string | null) | Place;
  area?: (string | null) | Place;
  contacts?: (string | Contact)[] | null;
  profiles?: (string | Profile)[] | null;
  categories?: (string | Category)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "counters".
 */
export interface Counter {
  id: string;
  type?: string | null;
  sectors?: (string | Sector)[] | null;
  name?: string | null;
  internalName?: string | null;
  marketplace?: (string | null) | Counter;
  workspaces?: (string | null) | Workspace;
  place?: (string | null) | Place;
  availabilityStatement?: Description;
  catalog?: (string | null) | Catalog;
  availabilities?: (string | Availability)[] | null;
  link?: string | null;
  contacts?: (string | Contact)[] | null;
  profiles?: (string | Profile)[] | null;
  categories?: (string | Category)[] | null;
  manager?: Party;
  mainImage?: (string | null) | Media;
  images?: (string | Media)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "catalogs".
 */
export interface Catalog {
  id: string;
  name?: string | null;
  type?: string | null;
  description?: Description;
  seller?: Party;
  area?: (string | null) | Place;
  productCategories?: (string | Category)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "availabilities".
 */
export interface Availability {
  id: string;
  key?: string | null;
  name?: string | null;
  season?: (string | null) | SeasonAvailability;
  week?: (string | null) | WeekAvailability;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "season_availabilities".
 */
export interface SeasonAvailability {
  id: string;
  key?: string | null;
  name?: string | null;
  year?: {
    months?: ('Jan' | 'Feb' | 'Mar' | 'Apr' | 'May' | 'Jun' | 'Jul' | 'Aug' | 'Sep' | 'Oct' | 'Nov' | 'Dec')[] | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "week_availabilities".
 */
export interface WeekAvailability {
  id: string;
  name?: string | null;
  days?: ('Mo' | 'Tu' | 'We' | 'Th' | 'Fr' | 'Sa' | 'Su')[] | null;
  timeRange?: {
    from?: string | null;
    to?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contributions".
 */
export interface Contribution {
  id: string;
  roles?: string[] | null;
  contributor?: Party;
  subject?: Subject;
  area?: (string | null) | Place;
  description?: Description;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Subject".
 */
export interface Subject {
  organisation?: (string | null) | Organisation;
  partnership?: (string | null) | Partnership;
  activity?: (string | null) | Activity;
  counter?: (string | null) | Counter;
  product?: (string | null) | Product;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products".
 */
export interface Product {
  id: string;
  name?: string | null;
  productGroup?: (string | null) | ProductGroup;
  references?: (string | Reference)[] | null;
  description?: Description;
  ingredientStatement?: Description;
  categories?: (string | Category)[] | null;
  producer?: Party;
  owner?: Party;
  claims?: (string | Code)[] | null;
  availabilities?: (string | Availability)[] | null;
  netWeight?: Quantity;
  dimensions?: {
    length?: Quantity;
    width?: Quantity;
    height?: Quantity;
    volume?: Quantity;
  };
  mainImage?: (string | null) | Media;
  images?: (string | Media)[] | null;
  allergenList?:
    | {
        containmentLevel?: (string | null) | Code;
        allergen?: (string | null) | Code;
        id?: string | null;
      }[]
    | null;
  nutrientList?:
    | {
        nutrient?: (string | null) | Code;
        quantity?: {
          value?: number | null;
          unit?: (string | null) | Unit;
        };
        id?: string | null;
      }[]
    | null;
  usageInstructions?: Description;
  storageInstructions?: Description;
  area?: (string | null) | Place;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "product_groups".
 */
export interface ProductGroup {
  id: string;
  name: string;
  categories?: (string | Category)[] | null;
  producer?: Party;
  owner?: Party;
  allergenList?:
    | {
        containmentLevel?: (string | null) | Code;
        allergen?: (string | null) | Code;
        id?: string | null;
      }[]
    | null;
  area?: (string | null) | Place;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "references".
 */
export interface Reference {
  id: string;
  number?: string | null;
  name?: string | null;
  system?: (string | null) | InformationSystem;
  tags?: string[] | null;
  target?: string | null;
  holder?: Party;
  targetType?: string | null;
  targetCollection?: string | null;
  area?: (string | null) | Place;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Quantity".
 */
export interface Quantity {
  value?: number | null;
  unit?: (string | null) | Unit;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "units".
 */
export interface Unit {
  id: string;
  name?: string | null;
  symbol?: string | null;
  key?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "relationships".
 */
export interface Relationship {
  id: string;
  name?: string | null;
  type?: string | null;
  contacts?: (string | Contact)[] | null;
  holder?: Party;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "actions".
 */
export interface Action {
  id: string;
  key?: string | null;
  name?: string | null;
  type?: string | null;
  link?: string | null;
  subject?: Party;
  area?: (string | null) | Place;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders".
 */
export interface Order {
  id: string;
  number?: string | null;
  seller?: Party;
  customer?: Party;
  categories?: (string | Category)[] | null;
  broker?: Party;
  counter?: (string | null) | Counter;
  session?: (string | null) | Session;
  lines?:
    | {
        product?: (string | null) | Product;
        quantity?: {
          value?: number | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sessions".
 */
export interface Session {
  id: string;
  name?: string | null;
  parent?: (string | null) | Session;
  timeRange?: {
    from?: string | null;
    to?: string | null;
  };
  description?: Description;
  categories?: (string | Category)[] | null;
  manager?: Party;
  place?: (string | null) | Place;
  catalog?: (string | null) | Catalog;
  profiles?: (string | Profile)[] | null;
  subject?: {
    counter?: (string | null) | Counter;
  };
  mainImage?: (string | null) | Media;
  images?: (string | Media)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscriptions".
 */
export interface Subscription {
  id: string;
  number?: string | null;
  status?: string | null;
  frequency?: {
    type?: string | null;
    interval?: number | null;
  };
  timeRange?: {
    from?: string | null;
    to?: string | null;
  };
  categories?: (string | Category)[] | null;
  provider?: Party;
  subscriber?: Party;
  counter?: (string | null) | Counter;
  session?: (string | null) | Session;
  note?: string | null;
  broker?: Party;
  lines?:
    | {
        product?: (string | null) | Product;
        quantity?: {
          value?: number | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fulfilments".
 */
export interface Fulfilment {
  id: string;
  number?: string | null;
  orders?: (string | Order)[] | null;
  operator?: Party;
  workspace?: (string | null) | Workspace;
  session?: (string | null) | Session;
  lines?:
    | {
        product?: (string | null) | Product;
        batch?: (string | null) | Batch;
        quantity?: {
          value?: number | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "batches".
 */
export interface Batch {
  id: string;
  number?: string | null;
  operator?: Party;
  workspace?: (string | null) | Workspace;
  session?: (string | null) | Session;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recipes".
 */
export interface Recipe {
  id: string;
  name?: string | null;
  area?: (string | null) | Place;
  categories?: (string | Category)[] | null;
  author?: Party;
  yieldStatement?: string | null;
  costCategory?: (string | null) | Category;
  difficulty?: (string | null) | Category;
  seasonality?: (string | null) | Category;
  description?: Description;
  profiles?: (string | Profile)[] | null;
  cookTime?: number | null;
  prepTime?: number | null;
  totalTime?: number | null;
  ingredientList?:
    | {
        name?: string | null;
        quantity?: Quantity;
        title?: string | null;
        id?: string | null;
      }[]
    | null;
  stepStatement?: Description;
  mainImage?: (string | null) | Media;
  images?: (string | Media)[] | null;
  allergenList?:
    | {
        containmentLevel?: (string | null) | Code;
        allergen?: (string | null) | Code;
        id?: string | null;
      }[]
    | null;
  nutrientList?:
    | {
        nutrient?: (string | null) | Code;
        quantity?: {
          value?: number | null;
          unit?: (string | null) | Unit;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "catalog_items".
 */
export interface CatalogItem {
  id: string;
  name?: string | null;
  catalog?: (string | null) | Catalog;
  product?: (string | null) | Product;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  tenancyRoles?:
    | {
        type: 'admin' | 'manager' | 'maintainer' | 'contributor';
        tenancy?: {
          area?: (string | null) | Place;
          sector?: (string | null) | Sector;
          organisation?: (string | null) | Organisation;
          partnership?: (string | null) | Partnership;
          activity?: (string | null) | Activity;
        };
        id?: string | null;
      }[]
    | null;
  roles?: ('admin' | 'user' | 'contributor')[] | null;
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'sectors';
        value: string | Sector;
      } | null)
    | ({
        relationTo: 'partnerships';
        value: string | Partnership;
      } | null)
    | ({
        relationTo: 'organisations';
        value: string | Organisation;
      } | null)
    | ({
        relationTo: 'activities';
        value: string | Activity;
      } | null)
    | ({
        relationTo: 'workspaces';
        value: string | Workspace;
      } | null)
    | ({
        relationTo: 'counters';
        value: string | Counter;
      } | null)
    | ({
        relationTo: 'places';
        value: string | Place;
      } | null)
    | ({
        relationTo: 'persons';
        value: string | Person;
      } | null)
    | ({
        relationTo: 'contributions';
        value: string | Contribution;
      } | null)
    | ({
        relationTo: 'relationships';
        value: string | Relationship;
      } | null)
    | ({
        relationTo: 'profiles';
        value: string | Profile;
      } | null)
    | ({
        relationTo: 'contacts';
        value: string | Contact;
      } | null)
    | ({
        relationTo: 'actions';
        value: string | Action;
      } | null)
    | ({
        relationTo: 'orders';
        value: string | Order;
      } | null)
    | ({
        relationTo: 'subscriptions';
        value: string | Subscription;
      } | null)
    | ({
        relationTo: 'fulfilments';
        value: string | Fulfilment;
      } | null)
    | ({
        relationTo: 'products';
        value: string | Product;
      } | null)
    | ({
        relationTo: 'product_groups';
        value: string | ProductGroup;
      } | null)
    | ({
        relationTo: 'recipes';
        value: string | Recipe;
      } | null)
    | ({
        relationTo: 'batches';
        value: string | Batch;
      } | null)
    | ({
        relationTo: 'sessions';
        value: string | Session;
      } | null)
    | ({
        relationTo: 'catalogs';
        value: string | Catalog;
      } | null)
    | ({
        relationTo: 'catalog_items';
        value: string | CatalogItem;
      } | null)
    | ({
        relationTo: 'availabilities';
        value: string | Availability;
      } | null)
    | ({
        relationTo: 'week_availabilities';
        value: string | WeekAvailability;
      } | null)
    | ({
        relationTo: 'season_availabilities';
        value: string | SeasonAvailability;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'classifications';
        value: string | Classification;
      } | null)
    | ({
        relationTo: 'codes';
        value: string | Code;
      } | null)
    | ({
        relationTo: 'code_lists';
        value: string | CodeList;
      } | null)
    | ({
        relationTo: 'units';
        value: string | Unit;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'knowledge_bases';
        value: string | KnowledgeBase;
      } | null)
    | ({
        relationTo: 'knowledge_element';
        value: string | KnowledgeElement;
      } | null)
    | ({
        relationTo: 'information_systems';
        value: string | InformationSystem;
      } | null)
    | ({
        relationTo: 'references';
        value: string | Reference;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sectors_select".
 */
export interface SectorsSelect<T extends boolean = true> {
  name?: T;
  within?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "partnerships_select".
 */
export interface PartnershipsSelect<T extends boolean = true> {
  name?: T;
  shortName?: T;
  place?: T;
  area?: T;
  contacts?: T;
  profiles?: T;
  sectors?: T;
  categories?: T;
  mainImage?: T;
  images?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "organisations_select".
 */
export interface OrganisationsSelect<T extends boolean = true> {
  number?: T;
  name?: T;
  legalFormShort?: T;
  legalForm?: T;
  registeredAt?: T;
  mainActivity?: T;
  owner?: T | PartySelect<T>;
  place?: T;
  workspaces?: T;
  mainImage?: T | ImageSelect<T>;
  images?: T | ImagesSelect<T>;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Party_select".
 */
export interface PartySelect<T extends boolean = true> {
  organisation?: T;
  partnership?: T;
  person?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Image_select".
 */
export interface ImageSelect<T extends boolean = true> {
  url?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Images_select".
 */
export interface ImagesSelect<T extends boolean = true> {
  url?: T;
  id?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activities_select".
 */
export interface ActivitiesSelect<T extends boolean = true> {
  isMain?: T;
  sectors?: T;
  name?: T;
  internalName?: T;
  mainWorkspace?: T;
  place?: T;
  manager?: T | PartySelect<T>;
  profiles?: T;
  contacts?: T;
  categories?: T;
  productionCategories?: T;
  otherCategories?: T;
  description?: T | DescriptionSelect<T>;
  mainImage?: T;
  images?: T;
  mainVideo?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Description_select".
 */
export interface DescriptionSelect<T extends boolean = true> {
  short?: T;
  long?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "workspaces_select".
 */
export interface WorkspacesSelect<T extends boolean = true> {
  number?: T;
  name?: T;
  internalName?: T;
  categories?: T;
  manager?: T | PartySelect<T>;
  owner?: T | PartySelect<T>;
  place?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "counters_select".
 */
export interface CountersSelect<T extends boolean = true> {
  type?: T;
  sectors?: T;
  name?: T;
  internalName?: T;
  marketplace?: T;
  workspaces?: T;
  place?: T;
  availabilityStatement?: T | DescriptionSelect<T>;
  catalog?: T;
  availabilities?: T;
  link?: T;
  contacts?: T;
  profiles?: T;
  categories?: T;
  manager?: T | PartySelect<T>;
  mainImage?: T;
  images?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "places_select".
 */
export interface PlacesSelect<T extends boolean = true> {
  key?: T;
  name?: T;
  type?: T;
  center?: T;
  within?: T;
  title?: T;
  address?: T | AddressSelect<T>;
  description?: T;
  categories?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Address_select".
 */
export interface AddressSelect<T extends boolean = true> {
  street?: T;
  postalCode?: T;
  locality?: T;
  municipality?: T;
  country?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "persons_select".
 */
export interface PersonsSelect<T extends boolean = true> {
  givenName?: T;
  familyName?: T;
  name?: T;
  place?: T;
  area?: T;
  contacts?: T;
  profiles?: T;
  categories?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contributions_select".
 */
export interface ContributionsSelect<T extends boolean = true> {
  roles?: T;
  contributor?: T | PartySelect<T>;
  subject?: T | SubjectSelect<T>;
  area?: T;
  description?: T | DescriptionSelect<T>;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Subject_select".
 */
export interface SubjectSelect<T extends boolean = true> {
  organisation?: T;
  partnership?: T;
  activity?: T;
  counter?: T;
  product?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "relationships_select".
 */
export interface RelationshipsSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  contacts?: T;
  holder?: T | PartySelect<T>;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "profiles_select".
 */
export interface ProfilesSelect<T extends boolean = true> {
  key?: T;
  localKey?: T;
  title?: T;
  name?: T;
  type?: T;
  link?: T;
  informationSystem?: T;
  subject?: T | PartySelect<T>;
  area?: T;
  description?: T | DescriptionSelect<T>;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contacts_select".
 */
export interface ContactsSelect<T extends boolean = true> {
  type?: T;
  givenName?: T;
  familyName?: T;
  name?: T;
  title?: T;
  mainEmail?: T;
  holder?: T | PartySelect<T>;
  area?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "actions_select".
 */
export interface ActionsSelect<T extends boolean = true> {
  key?: T;
  name?: T;
  type?: T;
  link?: T;
  subject?: T | PartySelect<T>;
  area?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders_select".
 */
export interface OrdersSelect<T extends boolean = true> {
  number?: T;
  seller?: T | PartySelect<T>;
  customer?: T | PartySelect<T>;
  categories?: T;
  broker?: T | PartySelect<T>;
  counter?: T;
  session?: T;
  lines?:
    | T
    | {
        product?: T;
        quantity?:
          | T
          | {
              value?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscriptions_select".
 */
export interface SubscriptionsSelect<T extends boolean = true> {
  number?: T;
  status?: T;
  frequency?:
    | T
    | {
        type?: T;
        interval?: T;
      };
  timeRange?:
    | T
    | {
        from?: T;
        to?: T;
      };
  categories?: T;
  provider?: T | PartySelect<T>;
  subscriber?: T | PartySelect<T>;
  counter?: T;
  session?: T;
  note?: T;
  broker?: T | PartySelect<T>;
  lines?:
    | T
    | {
        product?: T;
        quantity?:
          | T
          | {
              value?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fulfilments_select".
 */
export interface FulfilmentsSelect<T extends boolean = true> {
  number?: T;
  orders?: T;
  operator?: T | PartySelect<T>;
  workspace?: T;
  session?: T;
  lines?:
    | T
    | {
        product?: T;
        batch?: T;
        quantity?:
          | T
          | {
              value?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products_select".
 */
export interface ProductsSelect<T extends boolean = true> {
  name?: T;
  productGroup?: T;
  references?: T;
  description?: T | DescriptionSelect<T>;
  ingredientStatement?: T | DescriptionSelect<T>;
  categories?: T;
  producer?: T | PartySelect<T>;
  owner?: T | PartySelect<T>;
  claims?: T;
  availabilities?: T;
  netWeight?: T | QuantitySelect<T>;
  dimensions?:
    | T
    | {
        length?: T | QuantitySelect<T>;
        width?: T | QuantitySelect<T>;
        height?: T | QuantitySelect<T>;
        volume?: T | QuantitySelect<T>;
      };
  mainImage?: T;
  images?: T;
  allergenList?:
    | T
    | {
        containmentLevel?: T;
        allergen?: T;
        id?: T;
      };
  nutrientList?:
    | T
    | {
        nutrient?: T;
        quantity?:
          | T
          | {
              value?: T;
              unit?: T;
            };
        id?: T;
      };
  usageInstructions?: T | DescriptionSelect<T>;
  storageInstructions?: T | DescriptionSelect<T>;
  area?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Quantity_select".
 */
export interface QuantitySelect<T extends boolean = true> {
  value?: T;
  unit?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "product_groups_select".
 */
export interface ProductGroupsSelect<T extends boolean = true> {
  name?: T;
  categories?: T;
  producer?: T | PartySelect<T>;
  owner?: T | PartySelect<T>;
  allergenList?:
    | T
    | {
        containmentLevel?: T;
        allergen?: T;
        id?: T;
      };
  area?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recipes_select".
 */
export interface RecipesSelect<T extends boolean = true> {
  name?: T;
  area?: T;
  categories?: T;
  author?: T | PartySelect<T>;
  yieldStatement?: T;
  costCategory?: T;
  difficulty?: T;
  seasonality?: T;
  description?: T | DescriptionSelect<T>;
  profiles?: T;
  cookTime?: T;
  prepTime?: T;
  totalTime?: T;
  ingredientList?:
    | T
    | {
        name?: T;
        quantity?: T | QuantitySelect<T>;
        title?: T;
        id?: T;
      };
  stepStatement?: T | DescriptionSelect<T>;
  mainImage?: T;
  images?: T;
  allergenList?:
    | T
    | {
        containmentLevel?: T;
        allergen?: T;
        id?: T;
      };
  nutrientList?:
    | T
    | {
        nutrient?: T;
        quantity?:
          | T
          | {
              value?: T;
              unit?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "batches_select".
 */
export interface BatchesSelect<T extends boolean = true> {
  number?: T;
  operator?: T | PartySelect<T>;
  workspace?: T;
  session?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sessions_select".
 */
export interface SessionsSelect<T extends boolean = true> {
  name?: T;
  parent?: T;
  timeRange?:
    | T
    | {
        from?: T;
        to?: T;
      };
  description?: T | DescriptionSelect<T>;
  categories?: T;
  manager?: T | PartySelect<T>;
  place?: T;
  catalog?: T;
  profiles?: T;
  subject?:
    | T
    | {
        counter?: T;
      };
  mainImage?: T;
  images?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "catalogs_select".
 */
export interface CatalogsSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  description?: T | DescriptionSelect<T>;
  seller?: T | PartySelect<T>;
  area?: T;
  productCategories?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "catalog_items_select".
 */
export interface CatalogItemsSelect<T extends boolean = true> {
  name?: T;
  catalog?: T;
  product?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "availabilities_select".
 */
export interface AvailabilitiesSelect<T extends boolean = true> {
  key?: T;
  name?: T;
  season?: T;
  week?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "week_availabilities_select".
 */
export interface WeekAvailabilitiesSelect<T extends boolean = true> {
  name?: T;
  days?: T;
  timeRange?:
    | T
    | {
        from?: T;
        to?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "season_availabilities_select".
 */
export interface SeasonAvailabilitiesSelect<T extends boolean = true> {
  key?: T;
  name?: T;
  year?:
    | T
    | {
        months?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  key?: T;
  name?: T;
  subject?: T;
  classification?: T;
  color?: T;
  icon?:
    | T
    | {
        fa?: T;
      };
  title?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "classifications_select".
 */
export interface ClassificationsSelect<T extends boolean = true> {
  key?: T;
  name?: T;
  subject?: T;
  system?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "codes_select".
 */
export interface CodesSelect<T extends boolean = true> {
  id?: T;
  name?: T;
  code?: T;
  key?: T;
  rank?: T;
  skip?: T;
  list?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "code_lists_select".
 */
export interface CodeListsSelect<T extends boolean = true> {
  key?: T;
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "units_select".
 */
export interface UnitsSelect<T extends boolean = true> {
  id?: T;
  name?: T;
  symbol?: T;
  key?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  source?: T;
  author?: T | PartySelect<T>;
  license?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "knowledge_bases_select".
 */
export interface KnowledgeBasesSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  link?: T;
  area?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "knowledge_element_select".
 */
export interface KnowledgeElementSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  link?: T;
  base?: T;
  area?: T;
  categories?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "information_systems_select".
 */
export interface InformationSystemsSelect<T extends boolean = true> {
  key?: T;
  name?: T;
  type?: T;
  link?: T;
  area?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "references_select".
 */
export interface ReferencesSelect<T extends boolean = true> {
  number?: T;
  name?: T;
  system?: T;
  tags?: T;
  target?: T;
  holder?: T | PartySelect<T>;
  targetType?: T;
  targetCollection?: T;
  area?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  tenancyRoles?:
    | T
    | {
        type?: T;
        tenancy?:
          | T
          | {
              area?: T;
              sector?: T;
              organisation?: T;
              partnership?: T;
              activity?: T;
            };
        id?: T;
      };
  roles?: T;
  updatedAt?: T;
  createdAt?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}